GitFlow est un ensemble de règles simples qui se basent sur le fonctionnement par branche de Git
Voici le principe de base :
Notre projet sera basé sur quatres branches : release, feature et master develop : Ces deux branches sont strictement interdites en écriture aux développeurs
La branche master est le miroir de notre production. Il est donc logique que l'on ne puisse y pousser nos modifications directement.
La branche develop centralise toutes les nouvelles fonctionnalités qui seront livrées dans la prochaine version. Ici il va falloir se forcer à ne pas y faire de modifications directement.
#Je Développe Des Fonctionnalités
Je vais donc développer sur une branche de type feature par exemple.
#git checkout -b feature/<nom> develop
Si je développe une nouvelle fonctionnalitée, elle sera logiquement appliqué à la prochaine version : je crée donc ma branche à partir de la branche develop.
Je commence donc à travailler à partir du code mis à jour pour la nouvelle version.
git checkout dev
git merge feature/<nom> --no-ff
git branch -d feature/<nom>
Lorsque j'ai fini mon travail, je rapatrie celui-ci sur la branche de développement et je supprime la branche feature qui est devenue obsolète.
#Je Prépare Une Nouvelle Version Pour La Mise En Production
Je vais donc travailler sur une branche de type release.
#git checkout -b release/<version> develop
Je crée la branche à partir de la branche develop, ainsi je pourrais lancer mes tests et appliquer mes corrections pendant que mes collègues commencent déjà le développement de nouvelles fonctionnalités pour la version suivante.

#git checkout dev
#git merge release/<version> --no-ff

#git checkout master
#git merge release/<version> --no-ff
#git tag <version>

#git branch -d release/<version>
Lorsque tous mes tests sont passés avec succès et que ma nouvelle version est prête à être mise en production, je pousse tout sur la branche master et je n'oublie pas d'appliquer mes corrections à la branche de développement.

Je crée aussi un tag sur le dernier commit de la branche de production avec mon numéro de version afin de m'y retrouver plus tard.

Et enfin je supprime la branche release car maintenant elle ne sert plus à grand chose.
#Je Corrige
je vais donc travailler sur une branche de type hotfix.

#git checkout -b hotfix/<name> master
Pour ce cas particulier je crée ma branche à partir du miroir de production car je ne veux pas que toutes les fonctionnalités de ma branche de développement se retrouve en production lors d'une simple correction de bug.

#git checkout dev
#git merge hotfix/<name> --no-ff

#git checkout master
#git merge hotfix/<name> --no-ff
#git tag <version>

#git branch -d hotfix/<name>
Mon bug étant corrigé, je dois l'appliquer sur le dev et la prod. Une fois encore je versionne avec un tag sur la branche master et je supprime la branche hotfix.
